package com.msis.app.domain.entity;

import lombok.Data;
import org.hibernate.annotations.NaturalId;

import javax.persistence.*;
import javax.validation.constraints.*;
import java.time.LocalDateTime;
import java.util.Set;

@Data
@Entity
@Table(name = "modules", indexes = { @Index(name = "module_index", columnList = "module_id") } )
public class Module {
    /**
     * The auto-generated id by Hibernate. This id also serves as the primary key.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    /**
     * The id of a module. Note that the id of a module is different from the id auto-generated by Hibernate.
     * This is a required property, and must include from 6 to 7 characters.
     */
    @NaturalId
    @NotBlank
    @Size(min = 6, max = 7, message = "Module ID must be between {min} and {max} characters.")
    @Column(name = "module_id", unique = true)
    private String moduleId;

    /**
     * The name of a module.
     * This is a required property.
     */
    @NotBlank
    @Column(name = "name")
    private String name;

    /**
     * The number of credits of a module.
     * This is a required property, and must be a positive integer.
     */
    @NotNull
    @Min(value = 0, message = "Number of credits must not be smaller than 0.")
    @Column(name = "num_of_credits")
    private Integer numOfCredits;

    /**
     * The number of fee credits of a module.
     * This is a required property, and must be a positive double.
     */
    @NotNull
    @Min(value = 0, message = "Number of fee credits must not be smaller than 0.")
    @Column(name = "num_of_fee_credits")
    private Double numOfFeeCredits;

    /**
     * The weight of a module. Note that this is the weight of the final grade, not the mid-term grade.
     * This is a required property, and its value must be within (0, 1).
     */
    @NotNull
    @Min(value = 0L, message = "Weight must be greater than 0.")
    @Max(value = 1, message = "Weight must not be greater than 1.")
    @Column(name = "weight")
    private Double weight;

    /**
     * The date when a module is first created. This is a required property.
     */
    @NotNull
    @Column(name = "created_date")
    private LocalDateTime createdDate;

    /**
     * The read requisite modules of a module. They are the modules that must be studied once (without
     * having to pass) before this module is registered.
     */
    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "modules_read_requisites",
            joinColumns = @JoinColumn(name = "module_id"),
            inverseJoinColumns = @JoinColumn(name = "read_module_id"))
    private Set<Module> readRequisiteModules;

    /**
     * The read requisite modules of a module. They are the modules that must be passed before this
     * module is registered.
     */
    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "modules_pass_requisites",
            joinColumns = @JoinColumn(name = "module_id"),
            inverseJoinColumns = @JoinColumn(name = "pass_module_id"))
    private Set<Module> passRequisiteModules;

    /**
     * The read requisite modules of a module. They are the modules that must be registered at the same time
     * with this module.
     */
    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "modules_co_requisites",
            joinColumns = @JoinColumn(name = "module_id"),
            inverseJoinColumns = @JoinColumn(name = "co_module_id"))
    private Set<Module> coRequisiteModules;

    /**
     * Default constructor
     */
    public Module() {

    }
}
